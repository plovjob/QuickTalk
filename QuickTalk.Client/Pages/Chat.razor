@page "/chat"
@using QuickTalk.Client.Services
@using Microsoft.Extensions.Options
@inject NavigationManager NavigationManager
@inject ApiMessageService ApiMessageService
@inject IOptions<ApiBaseAddressConfiguration> Options

<h3>Chat</h3>
@if (IsConnected())
{
    <input type="text" @bind="userName" />
    <input type="text" @bind="message" />
    <input type="button" value="Send" @onclick="Send" />

    <ul id="chatRoom">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <p>Connecting....</p>
}

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userName;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl($"{Options.Value.BaseAddress}/chathub")
        .Build();

        //обработчик, который вызывается когда метод хаба с определенным методом вызыван
        //первый параметр - это идентификатор для обработчика
        hubConnection.On<string, string>("ReceiveMessage", (userName, message) =>
        {
            var resultMsg = $"{userName}: {message}";
            messages.Add(resultMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        if (hubConnection == null)
            throw new ArgumentNullException();

        //отправляет данные на сервер
        await hubConnection.SendAsync("SendMessage", userName, message);
        var content = new Content()
        {
            Message = new MessageDto
            {
                UserName = userName,
                Text = message,
            }
        };

        await SaveMessage(content);
    }

    async Task SaveMessage(Content content)
    {
        await ApiMessageService.SaveMessageAsync(content);
    }

    public bool IsConnected() => hubConnection != null
    ? hubConnection.State == HubConnectionState.Connected
    : false;
}
